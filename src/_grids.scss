@use 'sass:math';

$grid-columns: 12;
$justify-values: center, flex-start, flex-end, space-between, space-around;
$align-items-values: start, end, center, baseline, stretch;
$grid-gaps: (
  '0': 0,
  '1': 5px,
  '2': 10px,
  '3': 20px,
);

.container {
  width: 100%;
  box-sizing: border-box;
  margin: auto;

  @include xs {
    padding: 0 $base-padding * 1.5;
  }

  @include sm {
    max-width: 540px;
  }

  @include md {
    max-width: 720px;
  }

  @include lg {
    max-width: 960px;
  }

  @include xl {
    max-width: 1170px;
  }

  @include xxl {
    max-width: 1320px;
  }
}

.row {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

@mixin create-columns($bp) {
  @for $i from 1 through $grid-columns {
    .col-#{$bp}-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns) !important;
    }
  }
}

@include xs {
  @include create-columns(xs);
}

@include sm {
  @include create-columns(sm);
}

@include md {
  @include create-columns(md);
}

@include lg {
  @include create-columns(lg);
}

@include xl {
  @include create-columns(xl);
}

@include xxl {
  @include create-columns(xxl);
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    box-sizing: border-box;
    flex-grow: 0;
    width: math.div($i * 100%, $grid-columns);
  }
}

@each $key, $value in $grid-gaps {
  .gap-#{$key} > * {
    padding: $value;
  }
  .gap-#{$key} {
    margin-left: -$value;
    margin-right: -$value;
  }
}

@each $value in $justify-values {
  .justify-#{$value} {
    justify-content: $value;
  }
}

@each $value in $align-items-values {
  .align-items-#{$value} {
    align-items: $value;
  }
}
